openapi: 3.0.0
info:
  title: Swagger Sokroban
  description: Sokroban API
  termsOfService: http://swagger.io/terms/
  contact:
    email: tuf58324@temple.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://virtserver.swaggerhub.com/FRABINOVICH/Sokroban/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://petstore.swagger.io/v2
paths:
  /SignUp/{UserName}/{Password}:
    get:
      tags:
        - SokrobanLogin
      summary: Stores Login Credentials
      operationId: SignUp
      parameters:
        - name: UserName
          in: path
          description: UserName of player
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: Password
          in: path
          description: Password of player
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
        '406':
          description: Account already exists
  /Login/{UserName}/{Password}:
    get:
      tags:
        - SokrobanLogin
      summary: Checks passed Username/Password with stored info to confirm user
      operationId: Login
      parameters:
        - name: UserName
          in: path
          description: UserName of player
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: Password
          in: path
          description: Password of player
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Passed and Match
        '400':
          description: Incorrect Login info
  /GetStats:
    post:
      tags:
        - PlayerStats
      summary: Gets Players Scores,Time,and highest level
      operationId: GetStats
      parameters:
        - name: Stats
          in: query
          description: Returns Player stats
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - HighScore
                - BestTime
                - Highest level reached
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
