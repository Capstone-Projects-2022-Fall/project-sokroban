openapi: 3.0.0
info:
  description: Sokroban API
  version: "v1"
  title: SokrobanAPI
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: tuf58324@temple.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FRABINOVICH/Sokroban/1.0.0
  - url: 'https://petstore.swagger.io/v2'


paths:
  /Sokroban/SokLogin/{Username}/{Password}:
    post:
      tags:
        - Sokroban
      summary: Stores Login Credentials
      operationId: SignUp
      parameters:
        - name: Username
          in: path
          description: username of player
          required: true
          schema: 
            type: string
        - name: Password
          in: path
          description: Password of player
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
        '406':
          description: Account already exists 

 
  /Sokroban/SokValidation/{Username}/{Password}:
    get:
      tags:
        - Sokroban
      summary: Checks passed Username/Password with stored info to confirm user
      operationId: Login
      parameters:
        - name: Username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Password
          in: path
          description: Password of player
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Login Successful
          content:
             application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SokLogin'
        '400':
          description: Incorrect Login info
          

  /Sokroban/SokSave/{Username}/{Score}/{Time}/{Level}:
    post:
      tags:
        - Sokroban
      summary: Saves level stats 
      operationId: Save
      parameters:
        - name: Username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
        - name: Score
          in: path
          description: Score for level
          required: true
          schema:
            type: integer
        - name: Time
          in: path
          description: Time took to complete level
          required: true
          schema:
            type: integer
        - name: Level
          in: path
          description: Level user finished on
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Save completed
          content:
             application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SokLevel'
        '400':
          description: Unable to save, please try again
        
  
  /Sokroban/SokLevel/{Username}:
    get:
      tags:
        - Sokroban
      summary: Returns Level Data
      operationId: Leaderboard
      parameters:
      - name: Username
        in: path
        description: Username of player
        required: true
        schema:
          type: string
          example: SokrobanMaster77
      responses:
       '200':
        description: Save completed
        content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SokLevelReturn'
       '400':
        description: Unable to save, please try again

    
  /Sokroban/SokStats/{Username}:
    get:
      tags:
        - Sokroban
      summary: Gets Players Scores,Time,and highest level
      operationId: Get Stats
      parameters:
      - name: Username
        in: path
        description: Username of player
        required: true
        schema:
          type: string
          example: SokrobanMaster77
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SokStats'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SokStats'
        '400':
          description: Invalid status value

 
  
  
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:

    SokLogin:
      type: object
      required:
       - username
       - password
      properties:
        username:
          type: string
          example: SokMaster77
        password:
          type: string
          example: '********'
      xml:
        name: SokLogin
        
    SokLevel:
      type: object
      properties:
        level:
          type: integer
          format: int64
          example: 5
        username:
          type: string
          example: SokMaster77
        score:
           type: integer
           format: int64
           example: 1520
        time:
          type: integer
          format: int64
          example: 750
      xml:
        name: SokLevel
    
    SokLevelReturn:
      type: object
      properties:
        level:
          type: integer
          format: int64
          example: 5
        username:
          type: string
          example: SokMaster77
      xml:
        name: SokLevelReturn
    
    SokStats:
      type: object
      properties:
        level:
          type: integer
          format: int64
          example: 5
        username:
          type: string
          example: SokMaster77
        score:
           type: integer
           format: int64
           example: 1520
        time:
          type: integer
          format: int64
          example: 750
      xml:
        name: SokStats